Jslt = _{ SOI ~ Expr ~ EOI }

Value = _{ Array | Object | Number | String | Boolean | Null | FunctionCall | Accessor | Scope | Variable }

Expr = _{ OperatorExpr | VariableDef | FunctionDef | IfStatement | Value }
OperatorExpr = { Value ~ (Operator ~ Value)+ }

Operator = _{ Add | Sub | Div | Mul | Gte | Gt | Lte | Lt | And | Or | Equal | NotEqual }

Add = { "+" }
Sub = { "-" }
Mul = { "*" }
Div = { "/" }
Gt = { ">" }
Lt = { "<" }
Gte = { ">=" }
Lte = { "<=" }
Equal = { "==" }
NotEqual = { "!=" }
And = { "and" }
Or = { "or" }
If = _{ "if" }
For = _{ "for" }
Def = _{ "def" }
Let = _{ "let" }

Scope = { "(" ~ Expr ~ ")" }

Accessor = ${
    (("." ~ Ident?) | KeyAccessor) ~ Accessor?
}
KeyAccessor = { "[" ~ (RangeAccessor | Expr) ~ "]" }
FromRangeAccessor = { Expr ~ ":" ~ Expr? }
ToRangeAccessor = { Expr? ~ ":" ~ Expr }
RangeAccessor = { FromRangeAccessor | ToRangeAccessor }

FunctionCall = { Ident ~ FunctionCallArgs ~ Accessor? }
FunctionCallArgs = { "(" ~ Expr? ~ ("," ~ Expr)* ~ ")" }

FunctionDef = { Def ~ Ident ~ "("  ~ Ident? ~ ("," ~ Ident)* ~ ")" ~ Expr ~ Expr? }

Array    = {
    "[" ~ "]"
  | "[" ~ (ArrayFor | Expr) ~ ("," ~ (ArrayFor | Expr))* ~ ","? ~ "]"
}
ArrayFor = {
    For ~ "(" ~ Expr ~ ")" ~ Expr ~ IfCondition?
}

Object    = {
    "{" ~ ObjectSpread? ~ "}"
  | "{" ~ (ObjectFor | Pair) ~ ("," ~ (ObjectSpread | ObjectFor | Pair))* ~ ","? ~ "}"
}
ObjectFor = {
    For ~ "(" ~ Expr ~ ")" ~ Pair ~ IfCondition?
}
ObjectSpread = {
    "*" ~ ":" ~ Expr
}

Pair = {
    Expr ~ ":" ~ Expr
}

IfStatement = {
    IfCondition ~ Expr ~ ("else" ~ Expr)?
}

IfCondition = {
    If ~ "(" ~ Expr ~ ")"
}

Variable = { "$" ~ Ident ~ Accessor? }
VariableDef = { Let ~ Ident ~ "=" ~ Expr ~ Expr? }

String = ${ "\"" ~ Inner ~ "\"" }
Inner  = @{ Char* }
Char   =  {
    !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

Ident = @{ ("_" | ASCII_ALPHANUMERIC) ~ ("_" | "-" | ASCII_ALPHANUMERIC)* }

Number = @{
    "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

Boolean = { "true" | "false" }

Null = { "null" }

COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* }

WHITESPACE = _{ " " | "\t" | NEWLINE }
